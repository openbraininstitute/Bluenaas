name: Deploy to STAGING

permissions:
  id-token: write # Required for OIDC authentication
  contents: read # Standard permission for GitHub Actions

on:
  push:
    branches:
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish-to-aws-ecr:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: "prod"
      IMAGE_NAME: ${{ vars.PUBLICECR_URI }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Set up QEMU for ARM emulation
      #   uses: docker/setup-qemu-action@v3

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      - name: Checkout Ultralizer repo
        uses: actions/checkout@v4
        with:
          repository: openbraininstitute/Ultraliser
          token: ${{ secrets.ULTRALIZER_REPO_PAT }}
          path: build/Ultraliser
          ref: release-v.2.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PUBLICECR_UPLOAD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PUBLICECR_UPLOAD_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.PUBLICECR_REGION }}

      - name: Authenticate with AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and publish the Docker images to AWS ECR
        run: make publish

      # - name: Build and push ARM64 api image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: Dockerfile.api
      #     platforms: linux/arm64
      #     push: true
      #     tags: ${{ vars.PUBLICECR_URI }}:api-staging

      # - name: Build and push AMD64 worker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: Dockerfile.worker
      #     platforms: linux/amd64
      #     push: true
      #     tags: ${{ vars.PUBLICECR_URI }}:worker-staging

      # - name: Authenticate with AWS ECS
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ vars.AWS_STAGING_ECS_REDEPLOY_ROLE_ARN }}
      #     aws-region: ${{ vars.AWS_STAGING_REGION }}

      # - name: Trigger new deployment
      #   run: |
      #     aws ecs update-service \
      #       --cluster ${{ vars.AWS_STAGING_ECS_CLUSTER }} \
      #       --service ${{ vars.AWS_STAGING_ECS_SERVICE }} \
      #       --force-new-deployment

      # - name: Wait until the service is stable
      #   run: |
      #     aws ecs wait services-stable \
      #       --cluster ${{ vars.AWS_STAGING_ECS_CLUSTER }} \
      #       --service ${{ vars.AWS_STAGING_ECS_SERVICE }}
