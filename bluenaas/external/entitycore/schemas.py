# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-04-30T21:09:21+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import UUID4, BaseModel, Field, PositiveFloat, RootModel


class AgePeriod(Enum):
    prenatal = "prenatal"
    postnatal = "postnatal"
    unknown = "unknown"


class Annotation(BaseModel):
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    id: UUID = Field(..., title="Id")
    pref_label: str = Field(..., title="Pref Label")
    alt_label: str = Field(..., title="Alt Label")
    definition: str = Field(..., title="Definition")


class ApiErrorCode(Enum):
    GENERIC_ERROR = "GENERIC_ERROR"
    NOT_AUTHENTICATED = "NOT_AUTHENTICATED"
    NOT_AUTHORIZED = "NOT_AUTHORIZED"
    INVALID_REQUEST = "INVALID_REQUEST"
    ENTITY_NOT_FOUND = "ENTITY_NOT_FOUND"
    ENTITY_FORBIDDEN = "ENTITY_FORBIDDEN"
    ENTITY_DUPLICATED = "ENTITY_DUPLICATED"
    ASSET_NOT_FOUND = "ASSET_NOT_FOUND"
    ASSET_DUPLICATED = "ASSET_DUPLICATED"
    ASSET_INVALID_FILE = "ASSET_INVALID_FILE"
    ASSET_MISSING_PATH = "ASSET_MISSING_PATH"
    ASSET_INVALID_PATH = "ASSET_INVALID_PATH"
    ASSET_NOT_A_DIRECTORY = "ASSET_NOT_A_DIRECTORY"


class AssetStatus(Enum):
    created = "created"
    deleted = "deleted"


class BodyUploadEntityAssetEntityRouteEntityIdAssetsPost(BaseModel):
    file: bytes = Field(..., title="File")
    meta: Optional[Dict[str, Any]] = Field(None, title="Meta")


class BrainRegionCreate(BaseModel):
    id: int = Field(..., title="Id")
    name: str = Field(..., title="Name")
    acronym: str = Field(..., title="Acronym")
    children: List[int] = Field(..., title="Children")


class BrainRegionRead(BaseModel):
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    id: int = Field(..., title="Id")
    name: str = Field(..., title="Name")
    acronym: str = Field(..., title="Acronym")
    children: List[int] = Field(..., title="Children")


class ContributionCreate(BaseModel):
    agent_id: UUID = Field(..., title="Agent Id")
    role_id: UUID = Field(..., title="Role Id")
    entity_id: UUID = Field(..., title="Entity Id")


class EModel(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    description: str = Field(..., title="Description")
    name: str = Field(..., title="Name")
    iteration: str = Field(..., title="Iteration")
    score: float = Field(..., title="Score")
    seed: int = Field(..., title="Seed")


class EModelCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    description: str = Field(..., title="Description")
    name: str = Field(..., title="Name")
    iteration: str = Field(..., title="Iteration")
    score: float = Field(..., title="Score")
    seed: int = Field(..., title="Seed")
    species_id: UUID = Field(..., title="Species Id")
    strain_id: Optional[UUID] = Field(None, title="Strain Id")
    brain_region_id: int = Field(..., title="Brain Region Id")
    exemplar_morphology_id: UUID = Field(..., title="Exemplar Morphology Id")


class ElectricalRecordingOrigin(Enum):
    in_vivo = "in_vivo"
    in_vitro = "in_vitro"
    in_silico = "in_silico"
    unknown = "unknown"


class ElectricalRecordingStimulusShape(Enum):
    cheops = "cheops"
    constant = "constant"
    pulse = "pulse"
    step = "step"
    ramp = "ramp"
    noise = "noise"
    sinusoidal = "sinusoidal"
    other = "other"
    two_steps = "two_steps"
    unknown = "unknown"


class ElectricalRecordingStimulusType(Enum):
    voltage_clamp = "voltage_clamp"
    current_clamp = "current_clamp"
    conductance_clamp = "conductance_clamp"
    extracellular = "extracellular"
    other = "other"
    unknown = "unknown"


class ElectricalRecordingType(Enum):
    intracellular = "intracellular"
    extracellular = "extracellular"
    both = "both"
    unknown = "unknown"


class EntityRoute(Enum):
    age = "age"
    analysis_software_source_code = "analysis-software-source-code"
    emodel = "emodel"
    experimental_bouton_density = "experimental-bouton-density"
    experimental_neuron_density = "experimental-neuron-density"
    experimental_synapses_per_connection = "experimental-synapses-per-connection"
    memodel = "memodel"
    mesh = "mesh"
    reconstruction_morphology = "reconstruction-morphology"
    electrical_cell_recording = "electrical-cell-recording"
    electrical_recording_stimulus = "electrical-recording-stimulus"
    single_neuron_simulation = "single-neuron-simulation"
    single_neuron_synaptome = "single-neuron-synaptome"
    single_neuron_synaptome_simulation = "single-neuron-synaptome-simulation"
    ion_channel_model = "ion-channel-model"
    subject = "subject"
    synaptic_pathway = "synaptic-pathway"


class ErrorResponse(BaseModel):
    error_code: ApiErrorCode
    message: str = Field(..., title="Message")
    details: Optional[Any] = Field(None, title="Details")


class ExperimentalBoutonDensityCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license_id: Optional[UUID] = Field(None, title="License Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject_id: UUID = Field(..., title="Subject Id")
    brain_region_id: int = Field(..., title="Brain Region Id")
    legacy_id: Optional[str] = Field(..., title="Legacy Id")


class ExperimentalNeuronDensityCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license_id: Optional[UUID] = Field(None, title="License Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject_id: UUID = Field(..., title="Subject Id")
    brain_region_id: int = Field(..., title="Brain Region Id")
    legacy_id: Optional[str] = Field(..., title="Legacy Id")


class ExperimentalSynapsesPerConnectionCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license_id: Optional[UUID] = Field(None, title="License Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject_id: UUID = Field(..., title="Subject Id")
    brain_region_id: int = Field(..., title="Brain Region Id")
    legacy_id: Optional[str] = Field(..., title="Legacy Id")
    synaptic_pathway_id: UUID = Field(..., title="Synaptic Pathway Id")


class Facet(BaseModel):
    id: Union[UUID, int] = Field(..., title="Id")
    label: str = Field(..., title="Label")
    count: int = Field(..., title="Count")
    type: Optional[str] = Field(..., title="Type")


class Facets(RootModel[Optional[Dict[str, List[Facet]]]]):
    pass


class Ion(BaseModel):
    id: UUID = Field(..., title="Id")
    name: str = Field(..., title="Name")


class LicenseCreate(BaseModel):
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    label: str = Field(..., title="Label")


class LicenseRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    label: str = Field(..., title="Label")


class MeasurementUnit(Enum):
    dimensionless = "dimensionless"
    linear_density__1_um = "linear_density__1_um"
    volume_density__1_mm3 = "volume_density__1_mm3"


class MorphologyMeasurementSerieBase(BaseModel):
    name: str = Field(..., title="Name")
    value: float = Field(..., title="Value")


class NmodlParameters(BaseModel):
    range: List[str] = Field(..., title="Range")
    read: Optional[List[str]] = Field(None, title="Read")
    suffix: Optional[str] = Field(None, title="Suffix")
    useion: Optional[List[str]] = Field(None, title="Useion")
    write: Optional[List[str]] = Field(None, title="Write")
    nonspecific: Optional[List[str]] = Field(None, title="Nonspecific")
    valence: Optional[int] = Field(None, title="Valence")


class OrganizationCreate(BaseModel):
    pref_label: str = Field(..., title="Pref Label")
    alternative_name: Optional[str] = Field(None, title="Alternative Name")
    legacy_id: Optional[str] = Field(None, title="Legacy Id")


class OrganizationRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    pref_label: str = Field(..., title="Pref Label")
    alternative_name: Optional[str] = Field(None, title="Alternative Name")
    type: str = Field(..., title="Type")


class PaginationResponse(BaseModel):
    page: int = Field(..., title="Page")
    page_size: int = Field(..., title="Page Size")
    total_items: int = Field(..., title="Total Items")


class PersonCreate(BaseModel):
    givenName: str = Field(..., title="Givenname")
    familyName: str = Field(..., title="Familyname")
    pref_label: str = Field(..., title="Pref Label")
    legacy_id: Optional[str] = Field(None, title="Legacy Id")


class PersonRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    givenName: str = Field(..., title="Givenname")
    familyName: str = Field(..., title="Familyname")
    pref_label: str = Field(..., title="Pref Label")
    type: str = Field(..., title="Type")


class PointLocationBase(BaseModel):
    x: float = Field(..., title="X")
    y: float = Field(..., title="Y")
    z: float = Field(..., title="Z")


class ReconstructionMorphologyCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license_id: Optional[UUID] = Field(None, title="License Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    location: Optional[PointLocationBase]
    legacy_id: Optional[List[str]] = Field(None, title="Legacy Id")
    species_id: UUID = Field(..., title="Species Id")
    strain_id: Optional[UUID] = Field(None, title="Strain Id")
    brain_region_id: int = Field(..., title="Brain Region Id")


class RoleCreate(BaseModel):
    name: str = Field(..., title="Name")
    role_id: str = Field(..., title="Role Id")


class RoleRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    role_id: str = Field(..., title="Role Id")


class Sex(Enum):
    male = "male"
    female = "female"
    unknown = "unknown"


class SingleNeuronSimulationStatus(Enum):
    started = "started"
    failure = "failure"
    success = "success"


class SingleNeuronSynaptomeCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    me_model_id: UUID = Field(..., title="Me Model Id")
    brain_region_id: int = Field(..., title="Brain Region Id")


class SingleNeuronSynaptomeSimulationCreate(BaseModel):
    brain_region_id: int = Field(..., title="Brain Region Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str] = Field(..., title="Injectionlocation")
    recordingLocation: List[str] = Field(..., title="Recordinglocation")
    synaptome_id: UUID = Field(..., title="Synaptome Id")


class SpeciesCreate(BaseModel):
    name: str = Field(..., title="Name")
    taxonomy_id: str = Field(..., title="Taxonomy Id")


class SpeciesRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    taxonomy_id: str = Field(..., title="Taxonomy Id")


class StrainCreate(BaseModel):
    name: str = Field(..., title="Name")
    taxonomy_id: str = Field(..., title="Taxonomy Id")
    species_id: UUID = Field(..., title="Species Id")


class StrainRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    taxonomy_id: str = Field(..., title="Taxonomy Id")
    species_id: UUID = Field(..., title="Species Id")


class SubjectCreate(BaseModel):
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    sex: Sex = Field(..., description="Sex of the subject", title="Sex")
    weight: Optional[PositiveFloat] = Field(
        None, description="Weight in grams", title="Weight"
    )
    age_value: Optional[float] = Field(
        None, description="Age value interval.", title="Age value"
    )
    age_min: Optional[float] = Field(
        None, description="Minimum age range", title="Minimum age range"
    )
    age_max: Optional[float] = Field(
        None, description="Maximum age range", title="Maximum age range"
    )
    age_period: Optional[AgePeriod] = None
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    species_id: UUID = Field(..., title="Species Id")


class SubjectRead(BaseModel):
    id: UUID = Field(..., title="Id")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    sex: Sex = Field(..., description="Sex of the subject")
    weight: Optional[PositiveFloat] = Field(
        None, description="Weight in grams", title="Weight"
    )
    age_value: Optional[float] = Field(
        None, description="Age value interval.", title="Age value"
    )
    age_min: Optional[float] = Field(
        None, description="Minimum age range", title="Minimum age range"
    )
    age_max: Optional[float] = Field(
        None, description="Maximum age range", title="Maximum age range"
    )
    age_period: Optional[AgePeriod] = None
    species: SpeciesRead


class SynapticPathwayRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    pre_mtype: Annotation
    post_mtype: Annotation
    pre_region: BrainRegionRead
    post_region: BrainRegionRead


class ValidationStatus(Enum):
    created = "created"
    initialized = "initialized"
    running = "running"
    done = "done"
    error = "error"


class AppSchemasBaseMeasurementRead(BaseModel):
    measurement_of: str = Field(..., title="Measurement Of")
    measurement_serie: List[MorphologyMeasurementSerieBase] = Field(
        ..., title="Measurement Serie"
    )
    id: int = Field(..., title="Id")


class AppSchemasDensityMeasurementRead(BaseModel):
    id: int = Field(..., title="Id")
    name: str = Field(..., title="Name")
    unit: MeasurementUnit
    value: float = Field(..., title="Value")


class AgentRead(RootModel[Union[PersonRead, OrganizationRead]]):
    pass


class AssetRead(BaseModel):
    path: str = Field(..., title="Path")
    full_path: str = Field(..., title="Full Path")
    is_directory: bool = Field(..., title="Is Directory")
    content_type: str = Field(..., title="Content Type")
    size: int = Field(..., title="Size")
    sha256_digest: Optional[str] = Field(..., title="Sha256 Digest")
    meta: Dict[str, Any] = Field(..., title="Meta")
    id: UUID = Field(..., title="Id")
    status: AssetStatus


class ContributionReadWithoutEntity(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    agent: AgentRead
    role: RoleRead


class ElectricalCellRecordingCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license_id: Optional[UUID] = Field(None, title="License Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    ljp: Optional[float] = Field(
        0.0,
        description="Correction applied to the voltage trace, in mV",
        title="Liquid Junction Potential",
    )
    recording_location: List[str] = Field(
        ...,
        description="Location on the cell where recording was performed, in hoc-compatible format.",
        title="Recording Location",
    )
    recording_type: ElectricalRecordingType = Field(
        ...,
        description="Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]",
        title="Recording Type",
    )
    recording_origin: ElectricalRecordingOrigin = Field(
        ...,
        description="Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]",
        title="Recording Origin",
    )
    comment: Optional[str] = Field(
        None, description="Comment with further details.", title="Comment"
    )
    legacy_id: Optional[List[str]] = Field(None, title="Legacy Id")
    subject_id: UUID = Field(..., title="Subject Id")
    brain_region_id: Optional[int] = Field(None, title="Brain Region Id")


class ElectricalRecordingStimulusRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    dt: Optional[float] = Field(None, title="Dt")
    injection_type: ElectricalRecordingStimulusType
    shape: ElectricalRecordingStimulusShape
    start_time: Optional[float] = Field(None, title="Start Time")
    end_time: Optional[float] = Field(None, title="End Time")


class EntityRead(BaseModel):
    id: UUID = Field(..., title="Id")
    type: str = Field(..., title="Type")
    createdBy: Optional[AgentRead]
    updatedBy: Optional[AgentRead]
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: bool = Field(..., title="Authorized Public")


class ExemplarMorphology(BaseModel):
    id: UUID = Field(..., title="Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    location: Optional[PointLocationBase]
    legacy_id: Optional[List[str]] = Field(..., title="Legacy Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")


class ExperimentalBoutonDensityRead(BaseModel):
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject: SubjectRead
    brain_region: BrainRegionRead
    measurements: Optional[List[AppSchemasDensityMeasurementRead]] = Field(
        ..., title="Measurements"
    )
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")


class ExperimentalNeuronDensityRead(BaseModel):
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject: SubjectRead
    brain_region: BrainRegionRead
    measurements: Optional[List[AppSchemasDensityMeasurementRead]] = Field(
        ..., title="Measurements"
    )
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")
    etypes: Optional[List[Annotation]] = Field(..., title="Etypes")


class ExperimentalSynapsesPerConnectionRead(BaseModel):
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject: SubjectRead
    brain_region: BrainRegionRead
    measurements: Optional[List[AppSchemasDensityMeasurementRead]] = Field(
        ..., title="Measurements"
    )
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    synaptic_pathway: SynapticPathwayRead


class IonChannelModel(BaseModel):
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    is_ljp_corrected: bool = Field(..., title="Is Ljp Corrected")
    is_temperature_dependent: bool = Field(..., title="Is Temperature Dependent")
    temperature_celsius: int = Field(..., title="Temperature Celsius")
    is_stochastic: bool = Field(..., title="Is Stochastic")
    nmodl_parameters: NmodlParameters
    ions: List[Ion] = Field(..., title="Ions")


class ListResponseAnnotation(BaseModel):
    data: List[Annotation] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseAssetRead(BaseModel):
    data: List[AssetRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseExperimentalBoutonDensityRead(BaseModel):
    data: List[ExperimentalBoutonDensityRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseExperimentalNeuronDensityRead(BaseModel):
    data: List[ExperimentalNeuronDensityRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseExperimentalSynapsesPerConnectionRead(BaseModel):
    data: List[ExperimentalSynapsesPerConnectionRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseLicenseRead(BaseModel):
    data: List[LicenseRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseOrganizationRead(BaseModel):
    data: List[OrganizationRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponsePersonRead(BaseModel):
    data: List[PersonRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseRoleRead(BaseModel):
    data: List[RoleRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSpeciesRead(BaseModel):
    data: List[SpeciesRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseStrainRead(BaseModel):
    data: List[StrainRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSubjectRead(BaseModel):
    data: List[SubjectRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class MEModelCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    validation_status: Optional[ValidationStatus] = "created"
    brain_region_id: int = Field(..., title="Brain Region Id")
    morphology_id: UUID = Field(..., title="Morphology Id")
    emodel_id: UUID = Field(..., title="Emodel Id")
    species_id: UUID = Field(..., title="Species Id")
    strain_id: Optional[UUID] = Field(None, title="Strain Id")


class MEModelRead(BaseModel):
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    validation_status: Optional[ValidationStatus] = "created"
    id: UUID = Field(..., title="Id")
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")
    etypes: Optional[List[Annotation]] = Field(..., title="Etypes")
    morphology: ExemplarMorphology
    emodel: EModel

    holding_current: float = 0
    threshold_current: float = 0


class MeasurementCreate(BaseModel):
    measurement_of: str = Field(..., title="Measurement Of")
    measurement_serie: List[MorphologyMeasurementSerieBase] = Field(
        ..., title="Measurement Serie"
    )


class MorphologyFeatureAnnotationCreate(BaseModel):
    reconstruction_morphology_id: UUID = Field(
        ..., title="Reconstruction Morphology Id"
    )
    measurements: List[MeasurementCreate] = Field(..., title="Measurements")


class MorphologyFeatureAnnotationRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    reconstruction_morphology_id: UUID = Field(
        ..., title="Reconstruction Morphology Id"
    )
    measurements: List[AppSchemasBaseMeasurementRead] = Field(..., title="Measurements")


class NestedMEModel(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    validation_status: Optional[ValidationStatus] = "created"


class ReconstructionMorphologyAnnotationExpandedRead(BaseModel):
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    location: Optional[PointLocationBase]
    legacy_id: Optional[List[str]] = Field(..., title="Legacy Id")
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")
    morphology_feature_annotation: MorphologyFeatureAnnotationRead


class ReconstructionMorphologyRead(BaseModel):
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    location: Optional[PointLocationBase]
    legacy_id: Optional[List[str]] = Field(..., title="Legacy Id")
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")


class SingleNeuronSimulationCreate(BaseModel):
    brain_region_id: int = Field(..., title="Brain Region Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str] = Field(..., title="Injectionlocation")
    recordingLocation: List[str] = Field(..., title="Recordinglocation")
    me_model_id: UUID = Field(..., title="Me Model Id")


class SingleNeuronSimulationRead(BaseModel):
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    id: UUID = Field(..., title="Id")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    brain_region: BrainRegionRead
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str] = Field(..., title="Injectionlocation")
    recordingLocation: List[str] = Field(..., title="Recordinglocation")
    me_model: NestedMEModel


class SingleNeuronSynaptomeRead(BaseModel):
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    id: UUID = Field(..., title="Id")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    me_model: NestedMEModel
    brain_region: BrainRegionRead


class SingleNeuronSynaptomeSimulationRead(BaseModel):
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    id: UUID = Field(..., title="Id")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    brain_region: BrainRegionRead
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str] = Field(..., title="Injectionlocation")
    recordingLocation: List[str] = Field(..., title="Recordinglocation")
    synaptome: SingleNeuronSynaptomeRead


class ContributionRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    agent: AgentRead
    role: RoleRead
    entity: EntityRead


class EModelRead(BaseModel):
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    description: str = Field(..., title="Description")
    name: str = Field(..., title="Name")
    iteration: str = Field(..., title="Iteration")
    score: float = Field(..., title="Score")
    seed: int = Field(..., title="Seed")
    id: UUID = Field(..., title="Id")
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")
    etypes: Optional[List[Annotation]] = Field(..., title="Etypes")
    exemplar_morphology: ExemplarMorphology


class EModelReadExpanded(BaseModel):
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    description: str = Field(..., title="Description")
    name: str = Field(..., title="Name")
    iteration: str = Field(..., title="Iteration")
    score: float = Field(..., title="Score")
    seed: int = Field(..., title="Seed")
    id: UUID = Field(..., title="Id")
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")
    etypes: Optional[List[Annotation]] = Field(..., title="Etypes")
    exemplar_morphology: ExemplarMorphology
    ion_channel_models: List[IonChannelModel] = Field(..., title="Ion Channel Models")


class ElectricalCellRecordingRead(BaseModel):
    id: UUID = Field(..., title="Id")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    ljp: Optional[float] = Field(
        0.0,
        description="Correction applied to the voltage trace, in mV",
        title="Liquid Junction Potential",
    )
    recording_location: List[str] = Field(
        ...,
        description="Location on the cell where recording was performed, in hoc-compatible format.",
        title="Recording Location",
    )
    recording_type: ElectricalRecordingType = Field(
        ...,
        description="Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]",
        title="Recording Type",
    )
    recording_origin: ElectricalRecordingOrigin = Field(
        ...,
        description="Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]",
        title="Recording Origin",
    )
    comment: Optional[str] = Field(
        None, description="Comment with further details.", title="Comment"
    )
    legacy_id: Optional[List[str]] = Field(None, title="Legacy Id")
    subject: SubjectRead
    brain_region: BrainRegionRead
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    stimuli: Optional[List[ElectricalRecordingStimulusRead]] = Field(
        None,
        description="List of stimuli applied to the cell with their respective time steps",
        title="Electrical Recording Stimuli",
    )


class ListResponseContributionRead(BaseModel):
    data: List[ContributionRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseEModelRead(BaseModel):
    data: List[EModelRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseElectricalCellRecordingRead(BaseModel):
    data: List[ElectricalCellRecordingRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseMEModelRead(BaseModel):
    data: List[MEModelRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseMorphologyFeatureAnnotationRead(BaseModel):
    data: List[MorphologyFeatureAnnotationRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseReconstructionMorphologyRead(BaseModel):
    data: List[ReconstructionMorphologyRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSingleNeuronSimulationRead(BaseModel):
    data: List[SingleNeuronSimulationRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSingleNeuronSynaptomeRead(BaseModel):
    data: List[SingleNeuronSynaptomeRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSingleNeuronSynaptomeSimulationRead(BaseModel):
    data: List[SingleNeuronSynaptomeSimulationRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None
