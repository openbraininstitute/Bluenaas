# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-05-09T15:43:42+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import UUID4, BaseModel, Field, PositiveFloat, RootModel


class AgePeriod(Enum):
    prenatal = "prenatal"
    postnatal = "postnatal"
    unknown = "unknown"


class Annotation(BaseModel):
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    id: UUID = Field(..., title="Id")
    pref_label: str = Field(..., title="Pref Label")
    alt_label: str = Field(..., title="Alt Label")
    definition: str = Field(..., title="Definition")


class ApiErrorCode(Enum):
    GENERIC_ERROR = "GENERIC_ERROR"
    NOT_AUTHENTICATED = "NOT_AUTHENTICATED"
    NOT_AUTHORIZED = "NOT_AUTHORIZED"
    INVALID_REQUEST = "INVALID_REQUEST"
    ENTITY_NOT_FOUND = "ENTITY_NOT_FOUND"
    ENTITY_FORBIDDEN = "ENTITY_FORBIDDEN"
    ENTITY_DUPLICATED = "ENTITY_DUPLICATED"
    ASSET_NOT_FOUND = "ASSET_NOT_FOUND"
    ASSET_DUPLICATED = "ASSET_DUPLICATED"
    ASSET_INVALID_FILE = "ASSET_INVALID_FILE"
    ASSET_MISSING_PATH = "ASSET_MISSING_PATH"
    ASSET_INVALID_PATH = "ASSET_INVALID_PATH"
    ASSET_NOT_A_DIRECTORY = "ASSET_NOT_A_DIRECTORY"
    ASSET_INVALID_SCHEMA = "ASSET_INVALID_SCHEMA"
    ION_NAME_NOT_FOUND = "ION_NAME_NOT_FOUND"


class AssetLabel(Enum):
    neurolucida = "neurolucida"
    swc = "swc"
    hdf5 = "hdf5"


class AssetStatus(Enum):
    created = "created"
    deleted = "deleted"


class BodyUploadEntityAssetEntityRouteEntityIdAssetsPost(BaseModel):
    file: bytes = Field(..., title="File")
    meta: Optional[Dict[str, Any]] = Field(None, title="Meta")
    label: Optional[AssetLabel] = None


class BrainRegionHierarchyRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")


class BrainRegionRead(BaseModel):
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    id: UUID = Field(..., title="Id")
    annotation_value: int = Field(..., title="Annotation Value")
    name: str = Field(..., title="Name")
    acronym: str = Field(..., title="Acronym")
    color_hex_triplet: str = Field(..., title="Color Hex Triplet")
    parent_structure_id: Optional[UUID] = Field(..., title="Parent Structure Id")
    hierarchy_id: UUID = Field(..., title="Hierarchy Id")


class ContributionCreate(BaseModel):
    agent_id: UUID = Field(..., title="Agent Id")
    role_id: UUID = Field(..., title="Role Id")
    entity_id: UUID = Field(..., title="Entity Id")


class EModelCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    description: str = Field(..., title="Description")
    name: str = Field(..., title="Name")
    iteration: str = Field(..., title="Iteration")
    score: float = Field(..., title="Score")
    seed: int = Field(..., title="Seed")
    species_id: UUID = Field(..., title="Species Id")
    strain_id: Optional[UUID] = Field(None, title="Strain Id")
    brain_region_id: UUID = Field(..., title="Brain Region Id")
    exemplar_morphology_id: UUID = Field(..., title="Exemplar Morphology Id")


class ElectricalRecordingOrigin(Enum):
    in_vivo = "in_vivo"
    in_vitro = "in_vitro"
    in_silico = "in_silico"
    unknown = "unknown"


class ElectricalRecordingStimulusShape(Enum):
    cheops = "cheops"
    constant = "constant"
    pulse = "pulse"
    step = "step"
    ramp = "ramp"
    noise = "noise"
    sinusoidal = "sinusoidal"
    other = "other"
    two_steps = "two_steps"
    unknown = "unknown"


class ElectricalRecordingStimulusType(Enum):
    voltage_clamp = "voltage_clamp"
    current_clamp = "current_clamp"
    conductance_clamp = "conductance_clamp"
    extracellular = "extracellular"
    other = "other"
    unknown = "unknown"


class ElectricalRecordingType(Enum):
    intracellular = "intracellular"
    extracellular = "extracellular"
    both = "both"
    unknown = "unknown"


class EntityRoute(Enum):
    age = "age"
    analysis_software_source_code = "analysis-software-source-code"
    emodel = "emodel"
    experimental_bouton_density = "experimental-bouton-density"
    experimental_neuron_density = "experimental-neuron-density"
    experimental_synapses_per_connection = "experimental-synapses-per-connection"
    memodel = "memodel"
    mesh = "mesh"
    reconstruction_morphology = "reconstruction-morphology"
    electrical_cell_recording = "electrical-cell-recording"
    electrical_recording_stimulus = "electrical-recording-stimulus"
    single_neuron_simulation = "single-neuron-simulation"
    single_neuron_synaptome = "single-neuron-synaptome"
    single_neuron_synaptome_simulation = "single-neuron-synaptome-simulation"
    ion_channel_model = "ion-channel-model"
    subject = "subject"
    synaptic_pathway = "synaptic-pathway"


class EntityType(Enum):
    age = "age"
    analysis_software_source_code = "analysis_software_source_code"
    emodel = "emodel"
    experimental_bouton_density = "experimental_bouton_density"
    experimental_neuron_density = "experimental_neuron_density"
    experimental_synapses_per_connection = "experimental_synapses_per_connection"
    memodel = "memodel"
    mesh = "mesh"
    reconstruction_morphology = "reconstruction_morphology"
    electrical_cell_recording = "electrical_cell_recording"
    electrical_recording_stimulus = "electrical_recording_stimulus"
    single_neuron_simulation = "single_neuron_simulation"
    single_neuron_synaptome = "single_neuron_synaptome"
    single_neuron_synaptome_simulation = "single_neuron_synaptome_simulation"
    ion_channel_model = "ion_channel_model"
    subject = "subject"
    synaptic_pathway = "synaptic_pathway"


class ErrorResponse(BaseModel):
    error_code: ApiErrorCode
    message: str = Field(..., title="Message")
    details: Optional[Any] = Field(None, title="Details")


class ExperimentalBoutonDensityCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license_id: Optional[UUID] = Field(None, title="License Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject_id: UUID = Field(..., title="Subject Id")
    brain_region_id: UUID = Field(..., title="Brain Region Id")
    legacy_id: Optional[str] = Field(..., title="Legacy Id")


class ExperimentalNeuronDensityCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license_id: Optional[UUID] = Field(None, title="License Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject_id: UUID = Field(..., title="Subject Id")
    brain_region_id: UUID = Field(..., title="Brain Region Id")
    legacy_id: Optional[str] = Field(..., title="Legacy Id")


class ExperimentalSynapsesPerConnectionCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license_id: Optional[UUID] = Field(None, title="License Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject_id: UUID = Field(..., title="Subject Id")
    brain_region_id: UUID = Field(..., title="Brain Region Id")
    legacy_id: Optional[str] = Field(..., title="Legacy Id")
    synaptic_pathway_id: UUID = Field(..., title="Synaptic Pathway Id")


class Facet(BaseModel):
    id: Union[UUID, int] = Field(..., title="Id")
    label: str = Field(..., title="Label")
    count: int = Field(..., title="Count")
    type: Optional[str] = Field(..., title="Type")


class Facets(RootModel[Optional[Dict[str, List[Facet]]]]):
    pass


class LicenseCreate(BaseModel):
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    label: str = Field(..., title="Label")


class LicenseRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    label: str = Field(..., title="Label")


class MeasurableEntity(Enum):
    reconstruction_morphology = "reconstruction_morphology"


class MeasurementStatistic(Enum):
    mean = "mean"
    median = "median"
    mode = "mode"
    variance = "variance"
    data_point = "data_point"
    sample_size = "sample_size"
    standard_error = "standard_error"
    standard_deviation = "standard_deviation"
    raw = "raw"
    minimum = "minimum"
    maximum = "maximum"
    sum = "sum"


class MeasurementUnit(Enum):
    dimensionless = "dimensionless"
    field_1_μm = "1/μm"
    field_1_mm_ = "1/mm³"
    μm = "μm"
    μm_ = "μm²"
    μm__1 = "μm³"
    radian = "radian"


class NestedSynaptome(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")


class OrganizationCreate(BaseModel):
    pref_label: str = Field(..., title="Pref Label")
    alternative_name: Optional[str] = Field(None, title="Alternative Name")
    legacy_id: Optional[str] = Field(None, title="Legacy Id")


class OrganizationRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    pref_label: str = Field(..., title="Pref Label")
    alternative_name: Optional[str] = Field(None, title="Alternative Name")
    type: str = Field(..., title="Type")


class PaginationResponse(BaseModel):
    page: int = Field(..., title="Page")
    page_size: int = Field(..., title="Page Size")
    total_items: int = Field(..., title="Total Items")


class PersonCreate(BaseModel):
    givenName: str = Field(..., title="Givenname")
    familyName: str = Field(..., title="Familyname")
    pref_label: str = Field(..., title="Pref Label")
    legacy_id: Optional[str] = Field(None, title="Legacy Id")


class PersonRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    givenName: str = Field(..., title="Givenname")
    familyName: str = Field(..., title="Familyname")
    pref_label: str = Field(..., title="Pref Label")
    type: str = Field(..., title="Type")


class PointLocationBase(BaseModel):
    x: float = Field(..., title="X")
    y: float = Field(..., title="Y")
    z: float = Field(..., title="Z")


class ReconstructionMorphologyCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license_id: Optional[UUID] = Field(None, title="License Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    location: Optional[PointLocationBase]
    legacy_id: Optional[List[str]] = Field(None, title="Legacy Id")
    species_id: UUID = Field(..., title="Species Id")
    strain_id: Optional[UUID] = Field(None, title="Strain Id")
    brain_region_id: UUID = Field(..., title="Brain Region Id")


class RoleCreate(BaseModel):
    name: str = Field(..., title="Name")
    role_id: str = Field(..., title="Role Id")


class RoleRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    role_id: str = Field(..., title="Role Id")


class Sex(Enum):
    male = "male"
    female = "female"
    unknown = "unknown"


class SingleNeuronSimulationStatus(Enum):
    started = "started"
    failure = "failure"
    success = "success"


class SingleNeuronSynaptomeCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    me_model_id: UUID = Field(..., title="Me Model Id")
    brain_region_id: UUID = Field(..., title="Brain Region Id")


class SingleNeuronSynaptomeSimulationCreate(BaseModel):
    brain_region_id: UUID = Field(..., title="Brain Region Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str] = Field(..., title="Injectionlocation")
    recordingLocation: List[str] = Field(..., title="Recordinglocation")
    synaptome_id: UUID = Field(..., title="Synaptome Id")


class SingleNeuronSynaptomeSimulationRead(BaseModel):
    type: Optional[EntityType] = None
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    id: UUID = Field(..., title="Id")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    brain_region: BrainRegionRead
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str] = Field(..., title="Injectionlocation")
    recordingLocation: List[str] = Field(..., title="Recordinglocation")
    synaptome: NestedSynaptome


class SpeciesCreate(BaseModel):
    name: str = Field(..., title="Name")
    taxonomy_id: str = Field(..., title="Taxonomy Id")


class SpeciesRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    taxonomy_id: str = Field(..., title="Taxonomy Id")


class StrainCreate(BaseModel):
    name: str = Field(..., title="Name")
    taxonomy_id: str = Field(..., title="Taxonomy Id")
    species_id: UUID = Field(..., title="Species Id")


class StrainRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    taxonomy_id: str = Field(..., title="Taxonomy Id")
    species_id: UUID = Field(..., title="Species Id")


class StructuralDomain(Enum):
    apical_dendrite = "apical_dendrite"
    basal_dendrite = "basal_dendrite"
    axon = "axon"


class SubjectCreate(BaseModel):
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    sex: Sex = Field(..., description="Sex of the subject", title="Sex")
    weight: Optional[PositiveFloat] = Field(
        None, description="Weight in grams", title="Weight"
    )
    age_value: Optional[float] = Field(
        None, description="Age value interval.", title="Age value"
    )
    age_min: Optional[float] = Field(
        None, description="Minimum age range", title="Minimum age range"
    )
    age_max: Optional[float] = Field(
        None, description="Maximum age range", title="Maximum age range"
    )
    age_period: Optional[AgePeriod] = None
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    species_id: UUID = Field(..., title="Species Id")


class SubjectRead(BaseModel):
    id: UUID = Field(..., title="Id")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    sex: Sex = Field(..., description="Sex of the subject")
    weight: Optional[PositiveFloat] = Field(
        None, description="Weight in grams", title="Weight"
    )
    age_value: Optional[float] = Field(
        None, description="Age value interval.", title="Age value"
    )
    age_min: Optional[float] = Field(
        None, description="Minimum age range", title="Minimum age range"
    )
    age_max: Optional[float] = Field(
        None, description="Maximum age range", title="Maximum age range"
    )
    age_period: Optional[AgePeriod] = None
    species: SpeciesRead


class SynapticPathwayRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    pre_mtype: Annotation
    post_mtype: Annotation
    pre_region: BrainRegionRead
    post_region: BrainRegionRead


class UseIon(BaseModel):
    ion_name: str = Field(..., title="Ion Name")
    read: Optional[List[str]] = Field([], title="Read")
    write: Optional[List[str]] = Field([], title="Write")
    valence: Optional[int] = Field(None, title="Valence")
    main_ion: Optional[bool] = Field(None, title="Main Ion")


class ValidationStatus(Enum):
    created = "created"
    initialized = "initialized"
    running = "running"
    done = "done"
    error = "error"


class AgentRead(RootModel[Union[PersonRead, OrganizationRead]]):
    pass


class AssetRead(BaseModel):
    path: str = Field(..., title="Path")
    full_path: str = Field(..., title="Full Path")
    is_directory: bool = Field(..., title="Is Directory")
    content_type: str = Field(..., title="Content Type")
    size: int = Field(..., title="Size")
    sha256_digest: Optional[str] = Field(..., title="Sha256 Digest")
    meta: Dict[str, Any] = Field(..., title="Meta")
    label: Optional[AssetLabel] = None
    id: UUID = Field(..., title="Id")
    status: AssetStatus


class ContributionReadWithoutEntity(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    agent: AgentRead
    role: RoleRead


class ElectricalCellRecordingCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license_id: Optional[UUID] = Field(None, title="License Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    ljp: Optional[float] = Field(
        0.0,
        description="Correction applied to the voltage trace, in mV",
        title="Liquid Junction Potential",
    )
    recording_location: List[str] = Field(
        ...,
        description="Location on the cell where recording was performed, in hoc-compatible format.",
        title="Recording Location",
    )
    recording_type: ElectricalRecordingType = Field(
        ...,
        description="Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]",
        title="Recording Type",
    )
    recording_origin: ElectricalRecordingOrigin = Field(
        ...,
        description="Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]",
        title="Recording Origin",
    )
    comment: Optional[str] = Field(
        None, description="Comment with further details.", title="Comment"
    )
    legacy_id: Optional[List[str]] = Field(None, title="Legacy Id")
    subject_id: UUID = Field(..., title="Subject Id")
    brain_region_id: Optional[UUID] = Field(None, title="Brain Region Id")


class ElectricalRecordingStimulusRead(BaseModel):
    type: Optional[EntityType] = None
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    dt: Optional[float] = Field(None, title="Dt")
    injection_type: ElectricalRecordingStimulusType
    shape: ElectricalRecordingStimulusShape
    start_time: Optional[float] = Field(None, title="Start Time")
    end_time: Optional[float] = Field(None, title="End Time")


class EntityRead(BaseModel):
    id: UUID = Field(..., title="Id")
    type: str = Field(..., title="Type")
    createdBy: Optional[AgentRead]
    updatedBy: Optional[AgentRead]
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: bool = Field(..., title="Authorized Public")


class ExemplarMorphology(BaseModel):
    id: UUID = Field(..., title="Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    location: Optional[PointLocationBase]
    legacy_id: Optional[List[str]] = Field(..., title="Legacy Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")


class ListResponseAnnotation(BaseModel):
    data: List[Annotation] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseAssetRead(BaseModel):
    data: List[AssetRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseBrainRegionHierarchyRead(BaseModel):
    data: List[BrainRegionHierarchyRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseLicenseRead(BaseModel):
    data: List[LicenseRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseOrganizationRead(BaseModel):
    data: List[OrganizationRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponsePersonRead(BaseModel):
    data: List[PersonRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseRoleRead(BaseModel):
    data: List[RoleRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSingleNeuronSynaptomeSimulationRead(BaseModel):
    data: List[SingleNeuronSynaptomeSimulationRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSpeciesRead(BaseModel):
    data: List[SpeciesRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseStrainRead(BaseModel):
    data: List[StrainRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSubjectRead(BaseModel):
    data: List[SubjectRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class MEModelCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    validation_status: Optional[ValidationStatus] = "created"
    brain_region_id: UUID = Field(..., title="Brain Region Id")
    morphology_id: UUID = Field(..., title="Morphology Id")
    emodel_id: UUID = Field(..., title="Emodel Id")
    species_id: UUID = Field(..., title="Species Id")
    strain_id: Optional[UUID] = Field(None, title="Strain Id")


class MeasurementItem(BaseModel):
    name: Optional[MeasurementStatistic]
    unit: Optional[MeasurementUnit]
    value: Optional[float] = Field(..., title="Value")


class MeasurementKindCreate(BaseModel):
    structural_domain: Optional[StructuralDomain] = None
    measurement_items: List[MeasurementItem] = Field(..., title="Measurement Items")
    pref_label: str = Field(..., title="Pref Label")


class MeasurementKindRead(BaseModel):
    structural_domain: Optional[StructuralDomain] = None
    measurement_items: List[MeasurementItem] = Field(..., title="Measurement Items")
    pref_label: str = Field(..., title="Pref Label")


class MeasurementRead(BaseModel):
    id: int = Field(..., title="Id")
    name: str = Field(..., title="Name")
    unit: MeasurementUnit
    value: float = Field(..., title="Value")


class NestedMEModel(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    validation_status: Optional[ValidationStatus] = "created"
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")
    etypes: Optional[List[Annotation]] = Field(..., title="Etypes")


class NeuronBlock(BaseModel):
    global_: Optional[List[Dict[str, Optional[str]]]] = Field(
        [], alias="global", title="Global"
    )
    range: Optional[List[Dict[str, Optional[str]]]] = Field([], title="Range")
    useion: Optional[List[UseIon]] = Field([], title="Useion")
    nonspecific: Optional[List[Dict[str, Optional[str]]]] = Field(
        [], title="Nonspecific"
    )


class ReconstructionMorphologyRead(BaseModel):
    type: Optional[EntityType] = None
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    location: Optional[PointLocationBase]
    legacy_id: Optional[List[str]] = Field(..., title="Legacy Id")
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")


class SingleNeuronSimulationCreate(BaseModel):
    brain_region_id: UUID = Field(..., title="Brain Region Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str] = Field(..., title="Injectionlocation")
    recordingLocation: List[str] = Field(..., title="Recordinglocation")
    me_model_id: UUID = Field(..., title="Me Model Id")


class SingleNeuronSimulationRead(BaseModel):
    type: Optional[EntityType] = None
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    id: UUID = Field(..., title="Id")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    brain_region: BrainRegionRead
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str] = Field(..., title="Injectionlocation")
    recordingLocation: List[str] = Field(..., title="Recordinglocation")
    me_model: NestedMEModel


class SingleNeuronSynaptomeRead(BaseModel):
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    type: Optional[EntityType] = None
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    id: UUID = Field(..., title="Id")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    seed: int = Field(..., title="Seed")
    me_model: NestedMEModel
    brain_region: BrainRegionRead
    createdBy: Optional[AgentRead]
    updatedBy: Optional[AgentRead]


class ContributionRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    agent: AgentRead
    role: RoleRead
    entity: EntityRead


class EModelRead(BaseModel):
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    description: str = Field(..., title="Description")
    name: str = Field(..., title="Name")
    iteration: str = Field(..., title="Iteration")
    score: float = Field(..., title="Score")
    seed: int = Field(..., title="Seed")
    id: UUID = Field(..., title="Id")
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")
    etypes: Optional[List[Annotation]] = Field(..., title="Etypes")
    exemplar_morphology: ExemplarMorphology


class ElectricalCellRecordingRead(BaseModel):
    type: Optional[EntityType] = None
    id: UUID = Field(..., title="Id")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    ljp: Optional[float] = Field(
        0.0,
        description="Correction applied to the voltage trace, in mV",
        title="Liquid Junction Potential",
    )
    recording_location: List[str] = Field(
        ...,
        description="Location on the cell where recording was performed, in hoc-compatible format.",
        title="Recording Location",
    )
    recording_type: ElectricalRecordingType = Field(
        ...,
        description="Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]",
        title="Recording Type",
    )
    recording_origin: ElectricalRecordingOrigin = Field(
        ...,
        description="Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]",
        title="Recording Origin",
    )
    comment: Optional[str] = Field(
        None, description="Comment with further details.", title="Comment"
    )
    legacy_id: Optional[List[str]] = Field(None, title="Legacy Id")
    subject: SubjectRead
    brain_region: BrainRegionRead
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    stimuli: Optional[List[ElectricalRecordingStimulusRead]] = Field(
        None,
        description="List of stimuli applied to the cell with their respective time steps",
        title="Electrical Recording Stimuli",
    )


class ExperimentalBoutonDensityRead(BaseModel):
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject: SubjectRead
    brain_region: BrainRegionRead
    measurements: Optional[List[MeasurementRead]] = Field(..., title="Measurements")
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")


class ExperimentalNeuronDensityRead(BaseModel):
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject: SubjectRead
    brain_region: BrainRegionRead
    measurements: Optional[List[MeasurementRead]] = Field(..., title="Measurements")
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")
    etypes: Optional[List[Annotation]] = Field(..., title="Etypes")


class ExperimentalSynapsesPerConnectionRead(BaseModel):
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    subject: SubjectRead
    brain_region: BrainRegionRead
    measurements: Optional[List[MeasurementRead]] = Field(..., title="Measurements")
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    synaptic_pathway: SynapticPathwayRead


class IonChannelModelCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    description: str = Field(..., title="Description")
    name: str = Field(..., title="Name")
    nmodl_suffix: str = Field(..., title="Nmodl Suffix")
    is_ljp_corrected: Optional[bool] = Field(False, title="Is Ljp Corrected")
    is_temperature_dependent: Optional[bool] = Field(
        False, title="Is Temperature Dependent"
    )
    temperature_celsius: int = Field(..., title="Temperature Celsius")
    is_stochastic: Optional[bool] = Field(False, title="Is Stochastic")
    neuron_block: NeuronBlock
    species_id: UUID = Field(..., title="Species Id")
    strain_id: Optional[UUID] = Field(None, title="Strain Id")
    brain_region_id: UUID = Field(..., title="Brain Region Id")


class IonChannelModelExpanded(BaseModel):
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    description: str = Field(..., title="Description")
    name: str = Field(..., title="Name")
    nmodl_suffix: str = Field(..., title="Nmodl Suffix")
    is_ljp_corrected: Optional[bool] = Field(False, title="Is Ljp Corrected")
    is_temperature_dependent: Optional[bool] = Field(
        False, title="Is Temperature Dependent"
    )
    temperature_celsius: int = Field(..., title="Temperature Celsius")
    is_stochastic: Optional[bool] = Field(False, title="Is Stochastic")
    neuron_block: NeuronBlock
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: List[ContributionReadWithoutEntity] = Field(
        ..., title="Contributions"
    )


class IonChannelModelRead(BaseModel):
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    description: str = Field(..., title="Description")
    name: str = Field(..., title="Name")
    nmodl_suffix: str = Field(..., title="Nmodl Suffix")
    is_ljp_corrected: Optional[bool] = Field(False, title="Is Ljp Corrected")
    is_temperature_dependent: Optional[bool] = Field(
        False, title="Is Temperature Dependent"
    )
    temperature_celsius: int = Field(..., title="Temperature Celsius")
    is_stochastic: Optional[bool] = Field(False, title="Is Stochastic")
    neuron_block: NeuronBlock
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead


class IonChannelModelWAssets(BaseModel):
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    description: str = Field(..., title="Description")
    name: str = Field(..., title="Name")
    nmodl_suffix: str = Field(..., title="Nmodl Suffix")
    is_ljp_corrected: Optional[bool] = Field(False, title="Is Ljp Corrected")
    is_temperature_dependent: Optional[bool] = Field(
        False, title="Is Temperature Dependent"
    )
    temperature_celsius: int = Field(..., title="Temperature Celsius")
    is_stochastic: Optional[bool] = Field(False, title="Is Stochastic")
    neuron_block: NeuronBlock
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead


class ListResponseContributionRead(BaseModel):
    data: List[ContributionRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseEModelRead(BaseModel):
    data: List[EModelRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseElectricalCellRecordingRead(BaseModel):
    data: List[ElectricalCellRecordingRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseExperimentalBoutonDensityRead(BaseModel):
    data: List[ExperimentalBoutonDensityRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseExperimentalNeuronDensityRead(BaseModel):
    data: List[ExperimentalNeuronDensityRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseExperimentalSynapsesPerConnectionRead(BaseModel):
    data: List[ExperimentalSynapsesPerConnectionRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseIonChannelModelRead(BaseModel):
    data: List[IonChannelModelRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseReconstructionMorphologyRead(BaseModel):
    data: List[ReconstructionMorphologyRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSingleNeuronSimulationRead(BaseModel):
    data: List[SingleNeuronSimulationRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSingleNeuronSynaptomeRead(BaseModel):
    data: List[SingleNeuronSynaptomeRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class MEModelRead(BaseModel):
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    validation_status: Optional[ValidationStatus] = "created"
    id: UUID = Field(..., title="Id")
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")
    etypes: Optional[List[Annotation]] = Field(..., title="Etypes")
    morphology: ReconstructionMorphologyRead
    emodel: EModelRead
    holding_current: float = 0
    threshold_current: float = 1


class MeasurementAnnotationCreate(BaseModel):
    entity_id: UUID = Field(..., title="Entity Id")
    entity_type: MeasurableEntity
    measurement_kinds: List[MeasurementKindCreate] = Field(
        ..., title="Measurement Kinds"
    )


class MeasurementAnnotationRead(BaseModel):
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    entity_id: UUID = Field(..., title="Entity Id")
    entity_type: MeasurableEntity
    measurement_kinds: List[MeasurementKindRead] = Field(..., title="Measurement Kinds")


class ReconstructionMorphologyAnnotationExpandedRead(BaseModel):
    type: Optional[EntityType] = None
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    license: Optional[LicenseRead]
    id: UUID = Field(..., title="Id")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    location: Optional[PointLocationBase]
    legacy_id: Optional[List[str]] = Field(..., title="Legacy Id")
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")
    measurement_annotation: Optional[MeasurementAnnotationRead]


class EModelReadExpanded(BaseModel):
    assets: Optional[List[AssetRead]] = Field(..., title="Assets")
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title="Authorized Project Id")
    authorized_public: Optional[bool] = Field(False, title="Authorized Public")
    creation_date: datetime = Field(..., title="Creation Date")
    update_date: datetime = Field(..., title="Update Date")
    description: str = Field(..., title="Description")
    name: str = Field(..., title="Name")
    iteration: str = Field(..., title="Iteration")
    score: float = Field(..., title="Score")
    seed: int = Field(..., title="Seed")
    id: UUID = Field(..., title="Id")
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title="Contributions"
    )
    mtypes: Optional[List[Annotation]] = Field(..., title="Mtypes")
    etypes: Optional[List[Annotation]] = Field(..., title="Etypes")
    exemplar_morphology: ExemplarMorphology
    ion_channel_models: List[IonChannelModelWAssets] = Field(
        ..., title="Ion Channel Models"
    )


class ListResponseMEModelRead(BaseModel):
    data: List[MEModelRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseMeasurementAnnotationRead(BaseModel):
    data: List[MeasurementAnnotationRead] = Field(..., title="Data")
    pagination: PaginationResponse
    facets: Optional[Facets] = None
