# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-04-30T20:41:41+00:00

from __future__ import annotations

from typing import Any, Dict, List, Literal, Optional, TypedDict, Union

from typing_extensions import NotRequired

AgePeriod = Literal['prenatal', 'postnatal', 'unknown']


class Annotation(TypedDict):
    creation_date: str
    update_date: str
    id: str
    pref_label: str
    alt_label: str
    definition: str


ApiErrorCode = Literal[
    'GENERIC_ERROR',
    'NOT_AUTHENTICATED',
    'NOT_AUTHORIZED',
    'INVALID_REQUEST',
    'ENTITY_NOT_FOUND',
    'ENTITY_FORBIDDEN',
    'ENTITY_DUPLICATED',
    'ASSET_NOT_FOUND',
    'ASSET_DUPLICATED',
    'ASSET_INVALID_FILE',
    'ASSET_MISSING_PATH',
    'ASSET_INVALID_PATH',
    'ASSET_NOT_A_DIRECTORY',
]


AssetStatus = Literal['created', 'deleted']


class BodyUploadEntityAssetEntityRouteEntityIdAssetsPost(TypedDict):
    file: bytes
    meta: NotRequired[Optional[Dict[str, Any]]]


class BrainRegionCreate(TypedDict):
    id: int
    name: str
    acronym: str
    children: List[int]


class BrainRegionRead(TypedDict):
    creation_date: str
    update_date: str
    id: int
    name: str
    acronym: str
    children: List[int]


class ContributionCreate(TypedDict):
    agent_id: str
    role_id: str
    entity_id: str


class EModel(TypedDict):
    id: str
    creation_date: str
    update_date: str
    description: str
    name: str
    iteration: str
    score: float
    seed: int


class EModelCreate(TypedDict):
    authorized_public: NotRequired[bool]
    description: str
    name: str
    iteration: str
    score: float
    seed: int
    species_id: str
    strain_id: NotRequired[Optional[str]]
    brain_region_id: int
    exemplar_morphology_id: str


ElectricalRecordingOrigin = Literal['in_vivo', 'in_vitro', 'in_silico', 'unknown']


ElectricalRecordingStimulusShape = Literal[
    'cheops',
    'constant',
    'pulse',
    'step',
    'ramp',
    'noise',
    'sinusoidal',
    'other',
    'two_steps',
    'unknown',
]


ElectricalRecordingStimulusType = Literal[
    'voltage_clamp',
    'current_clamp',
    'conductance_clamp',
    'extracellular',
    'other',
    'unknown',
]


ElectricalRecordingType = Literal['intracellular', 'extracellular', 'both', 'unknown']


EntityRoute = Literal[
    'age',
    'analysis-software-source-code',
    'emodel',
    'experimental-bouton-density',
    'experimental-neuron-density',
    'experimental-synapses-per-connection',
    'memodel',
    'mesh',
    'reconstruction-morphology',
    'electrical-cell-recording',
    'electrical-recording-stimulus',
    'single-neuron-simulation',
    'single-neuron-synaptome',
    'single-neuron-synaptome-simulation',
    'ion-channel-model',
    'subject',
    'synaptic-pathway',
]


class ErrorResponse(TypedDict):
    error_code: ApiErrorCode
    message: str
    details: NotRequired[Any]


class ExperimentalBoutonDensityCreate(TypedDict):
    authorized_public: NotRequired[bool]
    license_id: NotRequired[Optional[str]]
    name: str
    description: str
    subject_id: str
    brain_region_id: int
    legacy_id: Optional[str]


class ExperimentalNeuronDensityCreate(TypedDict):
    authorized_public: NotRequired[bool]
    license_id: NotRequired[Optional[str]]
    name: str
    description: str
    subject_id: str
    brain_region_id: int
    legacy_id: Optional[str]


class ExperimentalSynapsesPerConnectionCreate(TypedDict):
    authorized_public: NotRequired[bool]
    license_id: NotRequired[Optional[str]]
    name: str
    description: str
    subject_id: str
    brain_region_id: int
    legacy_id: Optional[str]
    synaptic_pathway_id: str


class Facet(TypedDict):
    id: Union[str, int]
    label: str
    count: int
    type: Optional[str]


Facets = Optional[Dict[str, List[Facet]]]


class Ion(TypedDict):
    id: str
    name: str


class LicenseCreate(TypedDict):
    name: str
    description: str
    label: str


class LicenseRead(TypedDict):
    id: str
    creation_date: str
    update_date: str
    name: str
    description: str
    label: str


MeasurementUnit = Literal[
    'dimensionless', 'linear_density__1_um', 'volume_density__1_mm3'
]


class MorphologyMeasurementSerieBase(TypedDict):
    name: str
    value: float


class NmodlParameters(TypedDict):
    range: List[str]
    read: NotRequired[Optional[List[str]]]
    suffix: NotRequired[Optional[str]]
    useion: NotRequired[Optional[List[str]]]
    write: NotRequired[Optional[List[str]]]
    nonspecific: NotRequired[Optional[List[str]]]
    valence: NotRequired[Optional[int]]


class OrganizationCreate(TypedDict):
    pref_label: str
    alternative_name: NotRequired[Optional[str]]
    legacy_id: NotRequired[Optional[str]]


class OrganizationRead(TypedDict):
    id: str
    creation_date: str
    update_date: str
    pref_label: str
    alternative_name: NotRequired[Optional[str]]
    type: str


class PaginationResponse(TypedDict):
    page: int
    page_size: int
    total_items: int


class PersonCreate(TypedDict):
    givenName: str
    familyName: str
    pref_label: str
    legacy_id: NotRequired[Optional[str]]


class PersonRead(TypedDict):
    id: str
    creation_date: str
    update_date: str
    givenName: str
    familyName: str
    pref_label: str
    type: str


class PointLocationBase(TypedDict):
    x: float
    y: float
    z: float


class ReconstructionMorphologyCreate(TypedDict):
    authorized_public: NotRequired[bool]
    license_id: NotRequired[Optional[str]]
    name: str
    description: str
    location: Optional[PointLocationBase]
    legacy_id: NotRequired[Optional[List[str]]]
    species_id: str
    strain_id: NotRequired[Optional[str]]
    brain_region_id: int


class RoleCreate(TypedDict):
    name: str
    role_id: str


class RoleRead(TypedDict):
    id: str
    creation_date: str
    update_date: str
    name: str
    role_id: str


Sex = Literal['male', 'female', 'unknown']


SingleNeuronSimulationStatus = Literal['started', 'failure', 'success']


class SingleNeuronSynaptomeCreate(TypedDict):
    authorized_public: NotRequired[bool]
    name: str
    description: str
    seed: int
    me_model_id: str
    brain_region_id: int


class SingleNeuronSynaptomeSimulationCreate(TypedDict):
    brain_region_id: int
    authorized_public: NotRequired[bool]
    name: str
    description: str
    seed: int
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str]
    recordingLocation: List[str]
    synaptome_id: str


class SpeciesCreate(TypedDict):
    name: str
    taxonomy_id: str


class SpeciesRead(TypedDict):
    id: str
    creation_date: str
    update_date: str
    name: str
    taxonomy_id: str


class StrainCreate(TypedDict):
    name: str
    taxonomy_id: str
    species_id: str


class StrainRead(TypedDict):
    id: str
    creation_date: str
    update_date: str
    name: str
    taxonomy_id: str
    species_id: str


class SubjectCreate(TypedDict):
    name: str
    description: str
    sex: Sex
    weight: NotRequired[Optional[float]]
    age_value: NotRequired[Optional[float]]
    age_min: NotRequired[Optional[float]]
    age_max: NotRequired[Optional[float]]
    age_period: NotRequired[Optional[AgePeriod]]
    authorized_public: NotRequired[bool]
    species_id: str


class SubjectRead(TypedDict):
    id: str
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    creation_date: str
    update_date: str
    name: str
    description: str
    sex: Sex
    weight: NotRequired[Optional[float]]
    age_value: NotRequired[Optional[float]]
    age_min: NotRequired[Optional[float]]
    age_max: NotRequired[Optional[float]]
    age_period: NotRequired[Optional[AgePeriod]]
    species: SpeciesRead


class SynapticPathwayRead(TypedDict):
    id: str
    creation_date: str
    update_date: str
    pre_mtype: Annotation
    post_mtype: Annotation
    pre_region: BrainRegionRead
    post_region: BrainRegionRead


ValidationStatus = Literal['created', 'initialized', 'running', 'done', 'error']


class AppSchemasBaseMeasurementRead(TypedDict):
    measurement_of: str
    measurement_serie: List[MorphologyMeasurementSerieBase]
    id: int


class AppSchemasDensityMeasurementRead(TypedDict):
    id: int
    name: str
    unit: MeasurementUnit
    value: float


AgentRead = Union[PersonRead, OrganizationRead]


class AssetRead(TypedDict):
    path: str
    full_path: str
    is_directory: bool
    content_type: str
    size: int
    sha256_digest: Optional[str]
    meta: Dict[str, Any]
    id: str
    status: AssetStatus


class ContributionReadWithoutEntity(TypedDict):
    id: str
    creation_date: str
    update_date: str
    agent: AgentRead
    role: RoleRead


class ElectricalCellRecordingCreate(TypedDict):
    authorized_public: NotRequired[bool]
    license_id: NotRequired[Optional[str]]
    name: str
    description: str
    ljp: NotRequired[float]
    recording_location: List[str]
    recording_type: ElectricalRecordingType
    recording_origin: ElectricalRecordingOrigin
    comment: NotRequired[Optional[str]]
    legacy_id: NotRequired[Optional[List[str]]]
    subject_id: str
    brain_region_id: NotRequired[Optional[int]]


class ElectricalRecordingStimulusRead(TypedDict):
    id: str
    creation_date: str
    update_date: str
    name: str
    description: str
    dt: NotRequired[Optional[float]]
    injection_type: ElectricalRecordingStimulusType
    shape: ElectricalRecordingStimulusShape
    start_time: NotRequired[Optional[float]]
    end_time: NotRequired[Optional[float]]


class EntityRead(TypedDict):
    id: str
    type: str
    createdBy: Optional[AgentRead]
    updatedBy: Optional[AgentRead]
    authorized_project_id: str
    authorized_public: bool


class ExemplarMorphology(TypedDict):
    id: str
    name: str
    description: str
    location: Optional[PointLocationBase]
    legacy_id: Optional[List[str]]
    creation_date: str
    update_date: str


class ExperimentalBoutonDensityRead(TypedDict):
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    license: Optional[LicenseRead]
    id: str
    creation_date: str
    update_date: str
    name: str
    description: str
    subject: SubjectRead
    brain_region: BrainRegionRead
    measurements: Optional[List[AppSchemasDensityMeasurementRead]]
    assets: Optional[List[AssetRead]]
    contributions: Optional[List[ContributionReadWithoutEntity]]
    mtypes: Optional[List[Annotation]]


class ExperimentalNeuronDensityRead(TypedDict):
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    license: Optional[LicenseRead]
    id: str
    creation_date: str
    update_date: str
    name: str
    description: str
    subject: SubjectRead
    brain_region: BrainRegionRead
    measurements: Optional[List[AppSchemasDensityMeasurementRead]]
    assets: Optional[List[AssetRead]]
    contributions: Optional[List[ContributionReadWithoutEntity]]
    mtypes: Optional[List[Annotation]]
    etypes: Optional[List[Annotation]]


class ExperimentalSynapsesPerConnectionRead(TypedDict):
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    license: Optional[LicenseRead]
    id: str
    creation_date: str
    update_date: str
    name: str
    description: str
    subject: SubjectRead
    brain_region: BrainRegionRead
    measurements: Optional[List[AppSchemasDensityMeasurementRead]]
    assets: Optional[List[AssetRead]]
    contributions: Optional[List[ContributionReadWithoutEntity]]
    synaptic_pathway: SynapticPathwayRead


class IonChannelModel(TypedDict):
    assets: Optional[List[AssetRead]]
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    id: str
    creation_date: str
    update_date: str
    name: str
    description: str
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    is_ljp_corrected: bool
    is_temperature_dependent: bool
    temperature_celsius: int
    is_stochastic: bool
    nmodl_parameters: NmodlParameters
    ions: List[Ion]


class ListResponseAnnotation(TypedDict):
    data: List[Annotation]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseAssetRead(TypedDict):
    data: List[AssetRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseExperimentalBoutonDensityRead(TypedDict):
    data: List[ExperimentalBoutonDensityRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseExperimentalNeuronDensityRead(TypedDict):
    data: List[ExperimentalNeuronDensityRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseExperimentalSynapsesPerConnectionRead(TypedDict):
    data: List[ExperimentalSynapsesPerConnectionRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseLicenseRead(TypedDict):
    data: List[LicenseRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseOrganizationRead(TypedDict):
    data: List[OrganizationRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponsePersonRead(TypedDict):
    data: List[PersonRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseRoleRead(TypedDict):
    data: List[RoleRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseSpeciesRead(TypedDict):
    data: List[SpeciesRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseStrainRead(TypedDict):
    data: List[StrainRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseSubjectRead(TypedDict):
    data: List[SubjectRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class MEModelCreate(TypedDict):
    authorized_public: NotRequired[bool]
    name: str
    description: str
    validation_status: NotRequired[ValidationStatus]
    brain_region_id: int
    morphology_id: str
    emodel_id: str
    species_id: str
    strain_id: NotRequired[Optional[str]]


class MEModelRead(TypedDict):
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    creation_date: str
    update_date: str
    name: str
    description: str
    validation_status: NotRequired[ValidationStatus]
    id: str
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]]
    mtypes: Optional[List[Annotation]]
    etypes: Optional[List[Annotation]]
    morphology: ExemplarMorphology
    emodel: EModel


class MeasurementCreate(TypedDict):
    measurement_of: str
    measurement_serie: List[MorphologyMeasurementSerieBase]


class MorphologyFeatureAnnotationCreate(TypedDict):
    reconstruction_morphology_id: str
    measurements: List[MeasurementCreate]


class MorphologyFeatureAnnotationRead(TypedDict):
    id: str
    creation_date: str
    update_date: str
    reconstruction_morphology_id: str
    measurements: List[AppSchemasBaseMeasurementRead]


class NestedMEModel(TypedDict):
    id: str
    creation_date: str
    update_date: str
    name: str
    description: str
    validation_status: NotRequired[ValidationStatus]


class ReconstructionMorphologyAnnotationExpandedRead(TypedDict):
    assets: Optional[List[AssetRead]]
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    license: Optional[LicenseRead]
    id: str
    creation_date: str
    update_date: str
    name: str
    description: str
    location: Optional[PointLocationBase]
    legacy_id: Optional[List[str]]
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]]
    mtypes: Optional[List[Annotation]]
    morphology_feature_annotation: MorphologyFeatureAnnotationRead


class ReconstructionMorphologyRead(TypedDict):
    assets: Optional[List[AssetRead]]
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    license: Optional[LicenseRead]
    id: str
    creation_date: str
    update_date: str
    name: str
    description: str
    location: Optional[PointLocationBase]
    legacy_id: Optional[List[str]]
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]]
    mtypes: Optional[List[Annotation]]


class SingleNeuronSimulationCreate(TypedDict):
    brain_region_id: int
    authorized_public: NotRequired[bool]
    name: str
    description: str
    seed: int
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str]
    recordingLocation: List[str]
    me_model_id: str


class SingleNeuronSimulationRead(TypedDict):
    creation_date: str
    update_date: str
    id: str
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    brain_region: BrainRegionRead
    name: str
    description: str
    seed: int
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str]
    recordingLocation: List[str]
    me_model: NestedMEModel


class SingleNeuronSynaptomeRead(TypedDict):
    creation_date: str
    update_date: str
    id: str
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    name: str
    description: str
    seed: int
    me_model: NestedMEModel
    brain_region: BrainRegionRead


class SingleNeuronSynaptomeSimulationRead(TypedDict):
    creation_date: str
    update_date: str
    id: str
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    brain_region: BrainRegionRead
    name: str
    description: str
    seed: int
    status: SingleNeuronSimulationStatus
    injectionLocation: List[str]
    recordingLocation: List[str]
    synaptome: SingleNeuronSynaptomeRead


class ContributionRead(TypedDict):
    id: str
    creation_date: str
    update_date: str
    agent: AgentRead
    role: RoleRead
    entity: EntityRead


class EModelRead(TypedDict):
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    creation_date: str
    update_date: str
    description: str
    name: str
    iteration: str
    score: float
    seed: int
    id: str
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]]
    mtypes: Optional[List[Annotation]]
    etypes: Optional[List[Annotation]]
    exemplar_morphology: ExemplarMorphology


class EModelReadExpanded(TypedDict):
    assets: Optional[List[AssetRead]]
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    creation_date: str
    update_date: str
    description: str
    name: str
    iteration: str
    score: float
    seed: int
    id: str
    species: SpeciesRead
    strain: Optional[StrainRead]
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]]
    mtypes: Optional[List[Annotation]]
    etypes: Optional[List[Annotation]]
    exemplar_morphology: ExemplarMorphology
    ion_channel_models: List[IonChannelModel]


class ElectricalCellRecordingRead(TypedDict):
    id: str
    authorized_project_id: str
    authorized_public: NotRequired[bool]
    license: Optional[LicenseRead]
    creation_date: str
    update_date: str
    name: str
    description: str
    ljp: NotRequired[float]
    recording_location: List[str]
    recording_type: ElectricalRecordingType
    recording_origin: ElectricalRecordingOrigin
    comment: NotRequired[Optional[str]]
    legacy_id: NotRequired[Optional[List[str]]]
    subject: SubjectRead
    brain_region: BrainRegionRead
    assets: Optional[List[AssetRead]]
    stimuli: NotRequired[Optional[List[ElectricalRecordingStimulusRead]]]


class ListResponseContributionRead(TypedDict):
    data: List[ContributionRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseEModelRead(TypedDict):
    data: List[EModelRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseElectricalCellRecordingRead(TypedDict):
    data: List[ElectricalCellRecordingRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseMEModelRead(TypedDict):
    data: List[MEModelRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseMorphologyFeatureAnnotationRead(TypedDict):
    data: List[MorphologyFeatureAnnotationRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseReconstructionMorphologyRead(TypedDict):
    data: List[ReconstructionMorphologyRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseSingleNeuronSimulationRead(TypedDict):
    data: List[SingleNeuronSimulationRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseSingleNeuronSynaptomeRead(TypedDict):
    data: List[SingleNeuronSynaptomeRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]


class ListResponseSingleNeuronSynaptomeSimulationRead(TypedDict):
    data: List[SingleNeuronSynaptomeSimulationRead]
    pagination: PaginationResponse
    facets: NotRequired[Optional[Facets]]
