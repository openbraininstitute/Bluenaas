ARG UV_VERSION=0.7
ARG PYTHON_VERSION=3.12
ARG PYTHON_BASE=${PYTHON_VERSION}-slim

# uv stage
FROM ghcr.io/astral-sh/uv:${UV_VERSION} AS uv

# build stage
FROM python:$PYTHON_BASE AS builder
SHELL ["bash", "-e", "-x", "-o", "pipefail", "-c"]

COPY --from=uv /uv /usr/local/bin/uv

ENV UV_LINK_MODE=copy \
  UV_COMPILE_BYTECODE=1 \
  UV_PYTHON_DOWNLOADS=never \
  UV_PYTHON=python${PYTHON_VERSION}

WORKDIR /app

# TODO: remove what's not needed
RUN apt-get update \
  && apt-get install -q -y --no-install-recommends build-essential mpich libmpich-dev git \
  libabsl-dev \
  cmake \
  libeigen3-dev \
  libnanoflann-dev \
  libglm-dev \
  libroaring-dev \
  nlohmann-json3-dev \
  libtiff-dev \
  libhdf5-dev \
  libfmt-dev \
  zlib1g-dev \
  libbz2-dev \
  liblzma-dev \
  && rm -rf /var/lib/apt/lists/*

ARG ENVIRONMENT
RUN --mount=type=cache,target=/root/.cache/uv \
  --mount=type=bind,source=uv.lock,target=uv.lock \
  --mount=type=bind,source=pyproject.toml,target=pyproject.toml <<EOT
if [ "${ENVIRONMENT}" = "prod" ]; then
  uv sync --locked --no-install-project --no-dev --group worker
elif [ "${ENVIRONMENT}" = "dev" ]; then
  uv sync --locked --no-install-project --group worker
else
  echo "Invalid ENVIRONMENT"; exit 1
fi
# There are conflicting versions of glibc in NEURON and Libsonata, this is a tmp workaround.
uv pip install --force-reinstall https://files.pythonhosted.org/packages/71/30/5498b6838cfac205f836bcb4dd906a9495f7ea46bd844ca8bd56ea46bf63/libsonata-0.1.29-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
EOT

COPY ext-deps/Ultraliser/ /app/ultraliser
RUN ls /app/ultraliser
WORKDIR /app/ultraliser
RUN cmake \
  -DCMAKE_CXX_FLAGS="-mbmi" \
  -DCOMPILE_FROM_SOURCE=TRUE \
  -DCMAKE_BUILD_TYPE=Release \
  . && cmake --build . --parallel $(nproc)
RUN uv pip install .

# run stage
FROM python:$PYTHON_BASE
SHELL ["bash", "-e", "-x", "-o", "pipefail", "-c"]

# TODO: remove what's not needed
RUN apt-get update \
  && apt-get install -q -y --no-install-recommends build-essential mpich libmpich-dev libhdf5-dev libtiff6 libabsl20240722 libroaring0t64 \
  && rm -rf /var/lib/apt/lists/*

ARG HOST_UID
ARG HOST_GID

RUN <<EOT
  groupadd --system --gid ${HOST_GID} --force app
  useradd --system --home-dir /app --uid ${HOST_UID} --gid ${HOST_GID} app
EOT

USER app
WORKDIR /app

RUN mkdir -p /app/storage

ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH="/app:$PYTHONPATH"

# TODO: Double check if this is needed
ENV HDF5_USE_FILE_LOCKING=FALSE

COPY --chown=app:app --from=builder /app/.venv/ .venv
COPY --chown=app:app docker-worker-cmd.sh ./docker-cmd.sh
COPY --chown=app:app app/ ./app

RUN python -m compileall .

STOPSIGNAL SIGINT

CMD ["./docker-cmd.sh"]
